{"version":3,"sources":["hooks/useActiveOnIntersect.js","hooks/useFocusOnActive.js","TextInputFormElement.js","NumberInputFormElement.js","App.js","serviceWorker.js","index.js"],"names":["useActiveOnIntersect","setActiveElement","elementRef","options","root","document","querySelector","rootMargin","threshold","callback","entries","entry","intersectionRatio","isIntersecting","useEffect","current","IntersectionObserver","observe","useFocusOnActive","active","inputRef","focus","blur","TextInputFormElement","_ref","char","containerEl","useRef","react_default","a","createElement","id","concat","className","ref","type","NumberInputFormElement","num","data","App","_useState","useState","_useState2","Object","slicedToArray","activeElement","Fragment","map","item","NumberInputFormElement_NumberInputFormElement","key","TextInputFormElement_TextInputFormElement","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAEaA,EAAuB,SAACC,EAAkBC,GACrD,IAAMC,EAAU,CACdC,KAAMC,SAASC,cAAc,gBAC7BC,WAAY,MACZC,UAAW,GAGPC,EAAW,SAACC,GAChB,IAAMC,EAAQD,EAAQ,GAEpBE,EAEED,EAFFC,kBAEED,EADFE,gBAGqBD,EAAoB,KACzCX,KAIJa,oBAAU,WACHZ,EAAWa,SACG,IAAIC,qBAAqBP,EAAUN,GAC3Cc,QAAQf,EAAWa,UAE7B,KCxBQG,EAAmB,SAACC,EAAQC,GACvCN,oBAAU,WACR,GAAKK,GAAUC,EAASL,QAEtB,OADAK,EAASL,QAAQM,QACV,kBAAMD,EAASL,QAAQO,SAE/B,CAACH,KCHOI,QAAuB,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,KAAMN,EAA+BK,EAA/BL,OAAQlB,EAAuBuB,EAAvBvB,iBAC7CyB,EAAcC,mBACdP,EAAWO,mBAKjB,OAHA3B,EAAqB,kBAAMC,EAAiBwB,IAAOC,GACnDR,EAAiBC,EAAQC,GAGvBQ,EAAAC,EAAAC,cAAA,OACEC,GAAE,OAAAC,OAASP,GACXQ,UAAW,qBAAuBd,EAAO,UAAU,IACnDe,IAAKR,GAELE,EAAAC,EAAAC,cAAA,+BAAAE,OAA0BP,EAA1B,OACAG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLD,IAAKd,QCjBFgB,EAAyB,SAAAZ,GAAuC,IAApCa,EAAoCb,EAApCa,IAAKlB,EAA+BK,EAA/BL,OAAQlB,EAAuBuB,EAAvBvB,iBAC9CyB,EAAcC,mBACdP,EAAWO,mBAKjB,OAHA3B,EAAqB,kBAAMC,EAAiBoC,IAAMX,GAClDR,EAAiBC,EAAQC,GAGvBQ,EAAAC,EAAAC,cAAA,OACEC,GAAE,OAAAC,OAASK,GACXJ,UAAW,qBAAuBd,EAAO,UAAU,IACnDe,IAAKR,GAELE,EAAAC,EAAAC,cAAA,iCAAAE,OAA4BK,EAA5B,OACAT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEK,KAAK,SACLD,IAAKd,OCjBTkB,SAAO,CAAC,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,IAiCpCC,EA/BH,WAAM,IAAAC,EAC0BC,mBAAS,KADnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACMzC,EADNyC,EAAA,GAGhB,OACEd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiB,SAAA,KACAlB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcE,UAAU,qBAC9BL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAGXK,EAAKS,IAAI,SAAAC,GAAI,MACK,kBAATA,EACLpB,EAAAC,EAAAC,cAACmB,EAAD,CACA9B,OAAQ0B,IAAkBG,EAC1BE,IAAKF,EACLX,IAAKW,EACL/C,iBAAkBA,IAElB2B,EAAAC,EAAAC,cAACqB,EAAD,CACAhC,OAAQ0B,IAAkBG,EAC1BE,IAAKF,EACLvB,KAAMuB,EACN/C,iBAAkBA,UChBZmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAAStD,SAASuD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f6bd299c.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nexport const useActiveOnIntersect = (setActiveElement, elementRef) => {\n  const options = {\n    root: document.querySelector('#intersector'),\n    rootMargin: '0px',\n    threshold: 1.0,\n  };\n\n  const callback = (entries) => {\n    const entry = entries[0];\n    const {\n      intersectionRatio,\n      isIntersecting,\n    } = entry;\n\n    if ( isIntersecting && intersectionRatio > 0.95 ) {\n      setActiveElement();\n    }\n  };\n\n  useEffect(() => {\n    if ( elementRef.current ) {\n      const observer = new IntersectionObserver(callback, options);\n      observer.observe(elementRef.current);\n    }\n  }, []);\n};","import { useEffect } from 'react';\n\nexport const useFocusOnActive = (active, inputRef) => {\n  useEffect(() => {\n    if ( active && inputRef.current ) {\n      inputRef.current.focus();\n      return () => inputRef.current.blur();\n    }\n  }, [active]);\n};","import React, { useRef } from 'react';\nimport { useActiveOnIntersect } from './hooks/useActiveOnIntersect';\nimport { useFocusOnActive } from './hooks/useFocusOnActive';\nimport './TextInputFormElement.css'\n\nexport const TextInputFormElement = ({ char, active, setActiveElement }) => {\n  const containerEl = useRef();\n  const inputRef = useRef();\n\n  useActiveOnIntersect(() => setActiveElement(char), containerEl);\n  useFocusOnActive(active, inputRef);\n\n  return (\n    <div\n      id={`elem${char}`}\n      className={'element-container' + (active?' active':'')}\n      ref={containerEl}\n    >\n      <div>{`Form - textfield-${char}: `}</div>\n      <div>\n        <input\n          type='text'\n          ref={inputRef}\n        />\n      </div>\n    </div>\n  )\n};","import React, { useRef } from 'react';\nimport { useActiveOnIntersect } from './hooks/useActiveOnIntersect';\nimport { useFocusOnActive } from './hooks/useFocusOnActive';\nimport './TextInputFormElement.css'\n\nexport const NumberInputFormElement = ({ num, active, setActiveElement }) => {\n  const containerEl = useRef();\n  const inputRef = useRef();\n\n  useActiveOnIntersect(() => setActiveElement(num), containerEl);\n  useFocusOnActive(active, inputRef);\n\n  return (\n    <div\n      id={`elem${num}`}\n      className={'element-container' + (active?' active':'')}\n      ref={containerEl}\n    >\n      <div>{`Form - numberfield-${num}: `}</div>\n      <div>\n        <input\n          type='number'\n          ref={inputRef}\n        />\n      </div>\n    </div>\n  )\n};","import React, { useState } from 'react';\nimport { TextInputFormElement } from './TextInputFormElement';\nimport { NumberInputFormElement } from './NumberInputFormElement';\nimport './App.css';\n\nconst data = ['a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5];\n\nconst App = () => {\n  const [activeElement, setActiveElement] = useState('a');\n\n  return (\n    <>\n    <div id='intersector' className='intersection-line'>\n      <div className=\"app-container\">\n        \n        {\n          data.map(item => (\n            typeof item === 'number'\n            ? <NumberInputFormElement\n              active={activeElement === item}\n              key={item}\n              num={item}\n              setActiveElement={setActiveElement}\n            />\n            : <TextInputFormElement\n              active={activeElement === item}\n              key={item}\n              char={item}\n              setActiveElement={setActiveElement}\n            />\n          ))\n        }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}